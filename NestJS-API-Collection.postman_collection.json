{
  "info": {
    "_postman_id": "nest-crash-course-api",
    "name": "NestJS Crash Course API",
    "description": "NestJS Crash Course API Collection - Authentication, Products, Health endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "nest-crash-course"
  },
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check application health status"
          },
          "response": []
        }
      ],
      "description": "Health check endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful registration",
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "// Parse response and save tokens if successful",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.tokens) {",
                  "        pm.collectionVariables.set(\"accessToken\", response.tokens.accessToken);",
                  "        pm.collectionVariables.set(\"refreshToken\", response.tokens.refreshToken);",
                  "        pm.collectionVariables.set(\"userId\", response.user.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"password\": \"{{testPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with username and password"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful login",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Parse response and save tokens",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.tokens) {",
                  "        pm.collectionVariables.set(\"accessToken\", response.tokens.accessToken);",
                  "        pm.collectionVariables.set(\"refreshToken\", response.tokens.refreshToken);",
                  "        pm.collectionVariables.set(\"userId\", response.user.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Me",
          "request": {
            "method": "GET",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current user information (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful authentication",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Verify user data structure",
                  "if (pm.response.code === 200) {",
                  "    const user = pm.response.json();",
                  "    pm.test(\"User has required fields\", function () {",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('username');",
                  "        pm.expect(user).to.have.property('email');",
                  "        pm.expect(user).to.not.have.property('password');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful token refresh",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Update tokens if refresh successful",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set(\"accessToken\", response.accessToken);",
                  "    pm.collectionVariables.set(\"refreshToken\", response.refreshToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout and invalidate refresh token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful logout",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.unset(\"accessToken\");",
                  "    pm.collectionVariables.unset(\"refreshToken\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout All Devices",
          "request": {
            "method": "POST",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout-all",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout-all"]
            },
            "description": "Logout from all devices (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful logout from all devices",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.unset(\"accessToken\");",
                  "    pm.collectionVariables.unset(\"refreshToken\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Authentication endpoints for user registration, login, logout, and token management"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"price\": 99.99\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful product creation",
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "// Verify product structure",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const product = pm.response.json();",
                  "    pm.test(\"Product has required fields\", function () {",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('name');",
                  "        pm.expect(product).to.have.property('price');",
                  "    });",
                  "",
                  "    // Save product ID for later use",
                  "    pm.collectionVariables.set(\"lastProductId\", product.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Get all products with pagination and filtering (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful products retrieval",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Verify response structure",
                  "if (pm.response.code === 200) {",
                  "    const products = pm.response.json();",
                  "    pm.test(\"Response is an array\", function () {",
                  "        pm.expect(products).to.be.an('array');",
                  "    });",
                  "",
                  "    if (products.length > 0) {",
                  "        pm.test(\"Product has required fields\", function () {",
                  "            const product = products[0];",
                  "            pm.expect(product).to.have.property('id');",
                  "            pm.expect(product).to.have.property('name');",
                  "            pm.expect(product).to.have.property('price');",
                  "        });",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Products with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/products?limit=5&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Get products with pagination parameters"
          },
          "response": []
        },
        {
          "name": "Get All Products with Filtering",
          "request": {
            "method": "GET",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/products?filter[name]=Test",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "filter[name]",
                  "value": "Test"
                }
              ]
            },
            "description": "Get products filtered by name"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{lastProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{lastProductId}}"]
            },
            "description": "Get a specific product by ID (requires authentication)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful product retrieval",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Verify product structure",
                  "if (pm.response.code === 200) {",
                  "    const product = pm.response.json();",
                  "    pm.test(\"Product has required fields\", function () {",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('name');",
                  "        pm.expect(product).to.have.property('price');",
                  "    });",
                  "",
                  "    pm.test(\"Product ID matches\", function () {",
                  "        pm.expect(product.id).to.equal(pm.collectionVariables.get(\"lastProductId\"));",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Product management endpoints (all require authentication)"
    },
    {
      "name": "General",
      "item": [
        {
          "name": "Hello World",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/hello",
              "host": ["{{baseUrl}}"],
              "path": ["hello"]
            },
            "description": "Simple hello world endpoint"
          },
          "response": []
        }
      ],
      "description": "General application endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["// Global pre-request script", "// Add any global setup here"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": ["// Global test script", "// Add any global tests here"]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUsername",
      "value": "testuser",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "password123",
      "type": "string"
    }
  ]
}
